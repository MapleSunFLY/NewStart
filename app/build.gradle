apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.fly.newstart"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resValue("bool", "isSiner", "true")
        resValue("bool", "isDebug", "true")
        resValue("string", "text_network_error", "网络不给力，请稍后重试")
        resValue("integer", "time_connect_out", "60000")
        resValue("integer", "time_read_out", "60000")
        resValue("string", "defualt_http_url", "")

        //APK 极致优化
        // 1、SVG图片显示兼容
        // 2、着色器 Tint 使用 同一张图片动态颜色设置
        vectorDrawables.useSupportLibrary = true

        // 3、只保留默认的资源和指定的资源
        //resConfigs('zh-rCN','zh-rHK','en-rUS')

        //4、动态库的打包配置（去掉大头的过程，除定制化设备）
        //配置SO库架构（cpu架构）还可以添加  'armeabi-v7a', 'arm64-v8a'， 'x86', 'x86_64', 'mips', 'mips64'
        // armeabi 第5代 ARM armeabi（都兼容，但性能有所损耗，如微信和qq）
        // armeabi-v7a 第7代 游戏或者一些对手机性能有要求的app 目前大部分手机都支持这种cpu架构（王者荣耀）
        // arm64-v8a 第8代
        // x86 intel 32位，一般用于平板
        // x86_64 intel 64位，一般用于平板
        // mips 与 mips64  基本没见过
        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。 可以极大的减小apk 大小
            //如果是定制化项目尽可能兼容，如果是公众化项目并且对手机要求不高这样即可
            abiFilters('armeabi')
        }

        //5、移除无用资源 物理删除 提前备份 谨慎使用
        //A、Refactor->Remove Unused Resour.... 发射或动态调用的资源会被删除，如注入布局 不建议使用
        //B、Lint检查：Ctrl+N 搜索 Unused resources

        //6.启用代码的混淆  minifyEnabled true 在proguard-rules配置不混淆类容
        //7.启用资源压缩 shrinkResources true  在res/raw/keep.xml 中对不需要打包压缩的资源
        //8.启动webp转换插件，压缩图片 1.3mb的png-》100kb webp 效果几乎无损，操作：对应png或jpg图片右键最下面点击即可，直面效果

        //9、资源src的混淆、7Z压缩、对齐、签名工作
        /**
         * 资源混淆：微信方案
         * 资源目录目录为：apk中resourcer.arsc记录，资源混淆针对于这个文件操作
         * apk资源ID 0x7f0b0002  0x7f是一种标准 0b代表类型比如：layout 0002表示序列特指某一个layout：如main_activity.xml
         * */


        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        debug {
            //是否开启代码混淆 默认不开起
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            //是否开启代码混淆
            minifyEnabled true

            //启用资源压缩 没有用到的资源打包时进行压缩 只用一个占位符进行处理 在res/raw/keep.xml 中对不需要打包压缩的资源，进行配置 tools:keep="xxx"
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //将libs里面的SO库打包到apk内
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

//greenDao配置
apply plugin: 'org.greenrobot.greendao'
buildscript {
    repositories {
        mavenCentral()
    }
}
/**
 * schemaVersion--> 指定数据库schema版本号，迁移等操作会用到;
 * daoPackage --> dao的包名，包名默认是entity所在的包；
 * targetGenDir --> 生成数据库文件的目录;
 */
greendao {
    schemaVersion 1
    daoPackage 'com.fly.newstart.greendao.gen'
    targetGenDir 'src/main/java'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile files('libs/txk5.jar')
    //控件大全
    compile "com.android.support:design:${SUPPORT_VERSION}"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.code.gson:gson:2.7'
    //greenDao是一个将对象映射到SQLite数据库中的轻量且快速的ORM解决方案.
    compile 'org.greenrobot:greendao:3.0.1'
    compile 'org.greenrobot:greendao-generator:3.0.0'
    //okhttp
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.okio:okio:1.6.0'
    //RxJava
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'
    //okGo okhhttp 进一步封装
    compile 'com.lzy.net:okgo:3.0.4'
    //可以单独使用，不需要依赖下方的扩展包
    compile 'com.lzy.net:okrx:0.1.0'
    //RxJava扩展支持，根据需要添加
    compile 'com.lzy.net:okserver:1.1.0'
    //下载管理和上传管理扩展，根据需要添加
    //或者
    //compile 'com.lzy.net:okgo:+'        //版本号使用 + 可以自动引用最新版
    //compile 'com.lzy.net:okrx:+'        //版本号使用 + 可以自动引用最新版
    //compile 'com.lzy.net:okserver:+'    //版本号使用 + 可以自动引用最新版
    testCompile 'junit:junit:4.12'
    compile project(':myview')
    //pdf
    compile 'com.github.barteksc:android-pdf-viewer:2.7.0-beta.1'
    compile 'com.joanzapata.pdfview:android-pdfview:1.0.4@aar'
    //PDF
    compile 'cn.bingoogolapple:bga-qrcode-zxing:1.2.1'
    //ViewModel
    compile 'android.arch.lifecycle:extensions:1.0.0'
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0"
    // not needed if you are using the DefaultLifecycleObserver from common-java8 artifact.
    compile 'com.android.volley:volley:1.1.0'
    compile "com.alibaba:arouter-api:1.3.1"
    annotationProcessor "com.alibaba:arouter-compiler:1.1.4"
    compile project(':pluginlibrary')
}
